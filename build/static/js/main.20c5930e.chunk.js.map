{"version":3,"sources":["components/MemoBlock/MemoBlock.js","components/Board/Board.js","App.js","reportWebVitals.js","index.js"],"names":["MemoBlock","animating","handleMemoClick","memoBlock","className","onClick","flipped","emoji","Board","memoBlocks","map","i","emojiList","App","useState","shuffledMemoBlocks","setShuffledMemoBlocks","selectedMemoBlock","setselectedMemoBlock","setAnimating","useEffect","shuffledEmojiList","shuffleArray","index","a","length","j","Math","floor","random","flippedMemoBlock","shuffledMemoBlocksCopy","splice","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAceA,EAZG,SAAC,GAAD,IAAEC,EAAF,EAAEA,UAAWC,EAAb,EAAaA,gBAAiBC,EAA9B,EAA8BA,UAA9B,OACd,qBAAKC,UAAU,aAAaC,QAAS,kBAAQF,EAAUG,UAAYL,GAAcC,EAAgBC,IAAjG,SACI,sBAAKC,UAAS,2BAAsBD,EAAUG,SAAW,sBAAzD,UACI,qBAAKF,UAAU,qBAEf,qBAAKA,UAAU,kBAAf,SACKD,EAAUI,cCKZC,G,MAVD,SAAC,GAA8C,IAA7CP,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,gBAAiBO,EAAgB,EAAhBA,WACxC,OACI,sBAAML,UAAU,QAAhB,SACKK,EAAWC,KAAK,SAACP,EAAWQ,GACzB,OAAO,cAAC,EAAD,CAA2CV,UAAWA,EAAWC,gBAAiBA,EAAiBC,UAAWA,GAA9G,UAAmBQ,EAAnB,YAAwBR,EAAUI,eCJnDK,EAAS,YAAO,oGA8CPC,EA5CH,WAAO,IAAD,EACoCC,mBAAS,IAD7C,mBACTC,EADS,KACWC,EADX,OAEkCF,mBAAS,MAF3C,mBAETG,EAFS,KAEUC,EAFV,OAGkBJ,oBAAS,GAH3B,mBAGTb,EAHS,KAGEkB,EAHF,KAKhBC,qBAAW,WACT,IAAMC,EAAoBC,EAAa,GAAD,mBAAKV,GAAL,YAAmBA,KACzDI,EAAsBK,EAAkBX,KAAK,SAACH,EAAOI,GAAR,MAAe,CAAEY,MAAOZ,EAAGJ,QAAOD,SAAS,SACvF,IAEH,IAAMgB,EAAe,SAAAE,GACnB,IAAK,IAAIb,EAAIa,EAAEC,OAAS,EAAGd,EAAI,EAAGA,IAAK,CACnC,IAAMe,EAAIC,KAAKC,MAAMD,KAAKE,UAAYlB,EAAI,IADP,EAEpB,CAACa,EAAEE,GAAIF,EAAEb,IAAvBa,EAAEb,GAFgC,KAE5Ba,EAAEE,GAF0B,KAIvC,OAAOF,GAwBT,OACE,cAAC,EAAD,CAAOf,WAAYM,EAAoBd,UAAWA,EAAYC,gBAtBxC,SAAAC,GACtB,IAAM2B,EAAgB,2BAAQ3B,GAAR,IAAmBG,SAAS,IAC9CyB,EAAsB,YAAOhB,GACjCgB,EAAuBC,OAAO7B,EAAUoB,MAAO,EAAGO,GAClDd,EAAsBe,GACG,OAAtBd,EACDC,EAAqBf,GACbc,EAAkBV,QAAUJ,EAAUI,MAC9CW,EAAqB,OAErBC,GAAa,GACbc,YAAW,WACTF,EAAuBC,OAAO7B,EAAUoB,MAAO,EAAGpB,GAClD4B,EAAuBC,OAAOf,EAAkBM,MAAO,EAAGN,GAC1DD,EAAsBe,GACtBb,EAAqB,MACrBC,GAAa,KACZ,UC5BMe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.20c5930e.chunk.js","sourcesContent":["import './MemoBlock.css';\n\nconst MemoBlock = ({animating, handleMemoClick, memoBlock}) => (\n    <div className=\"memo-block\" onClick={() => (!memoBlock.flipped && !animating) && handleMemoClick(memoBlock)}>\n        <div className={`memo-block-inner ${memoBlock.flipped && 'memo-block-flipped'}`}>\n            <div className=\"memo-block-front\">\n            </div>\n            <div className=\"memo-block-back\">\n                {memoBlock.emoji}\n            </div>\n        </div>\n    </div>\n)\n\nexport default MemoBlock;","import MemoBlock from '../MemoBlock/MemoBlock';\nimport './Board.css';\n\nconst Board = ({animating, handleMemoClick, memoBlocks}) => {\n    return (\n        <main className=\"board\">\n            {memoBlocks.map( (memoBlock, i) => {\n                return <MemoBlock key={`${i}_${memoBlock.emoji}`} animating={animating} handleMemoClick={handleMemoClick} memoBlock={memoBlock} />\n            })}\n        </main>\n    );\n}\n\nexport default Board;","import './App.css';\nimport { useEffect, useState } from 'react';\nimport Board from './components/Board/Board';\nconst emojiList = [...'💣🧤🎩🌮🎱🌶🍕🦖'];\n\nconst App = () => {\n  const [shuffledMemoBlocks, setShuffledMemoBlocks] = useState([]);\n  const [selectedMemoBlock, setselectedMemoBlock] = useState(null);\n  const [animating, setAnimating] = useState(false);\n\n  useEffect( () => {\n    const shuffledEmojiList = shuffleArray([...emojiList, ...emojiList]);\n    setShuffledMemoBlocks(shuffledEmojiList.map( (emoji, i) => ({ index: i, emoji, flipped: false}) ));\n  }, []);\n\n  const shuffleArray = a => {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n\n  const handleMemoClick = memoBlock => {\n    const flippedMemoBlock = { ...memoBlock, flipped: true };\n    let shuffledMemoBlocksCopy = [...shuffledMemoBlocks];\n    shuffledMemoBlocksCopy.splice(memoBlock.index, 1, flippedMemoBlock);\n    setShuffledMemoBlocks(shuffledMemoBlocksCopy);\n    if(selectedMemoBlock === null) {\n      setselectedMemoBlock(memoBlock);\n    } else if(selectedMemoBlock.emoji === memoBlock.emoji) {\n      setselectedMemoBlock(null);\n    } else {\n      setAnimating(true);\n      setTimeout(() => {\n        shuffledMemoBlocksCopy.splice(memoBlock.index, 1, memoBlock);\n        shuffledMemoBlocksCopy.splice(selectedMemoBlock.index, 1, selectedMemoBlock);\n        setShuffledMemoBlocks(shuffledMemoBlocksCopy);\n        setselectedMemoBlock(null);\n        setAnimating(false);\n      }, 1000);\n    }\n  }\n\n  return (\n    <Board memoBlocks={shuffledMemoBlocks} animating={animating}  handleMemoClick={handleMemoClick} />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}